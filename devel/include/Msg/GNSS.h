// Generated by gencpp from file Msg/GNSS.msg
// DO NOT EDIT!


#ifndef MSG_MESSAGE_GNSS_H
#define MSG_MESSAGE_GNSS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace Msg
{
template <class ContainerAllocator>
struct GNSS_
{
  typedef GNSS_<ContainerAllocator> Type;

  GNSS_()
    : EgoAccel()
    , IMUAccel()
    , EgoVel()
    , IMUVel()
    , EgoVelocity(0.0)
    , IMUVelocity(0.0)  {
      EgoAccel.assign(0.0);

      IMUAccel.assign(0.0);

      EgoVel.assign(0.0);

      IMUVel.assign(0.0);
  }
  GNSS_(const ContainerAllocator& _alloc)
    : EgoAccel()
    , IMUAccel()
    , EgoVel()
    , IMUVel()
    , EgoVelocity(0.0)
    , IMUVelocity(0.0)  {
  (void)_alloc;
      EgoAccel.assign(0.0);

      IMUAccel.assign(0.0);

      EgoVel.assign(0.0);

      IMUVel.assign(0.0);
  }



   typedef boost::array<float, 3>  _EgoAccel_type;
  _EgoAccel_type EgoAccel;

   typedef boost::array<float, 3>  _IMUAccel_type;
  _IMUAccel_type IMUAccel;

   typedef boost::array<float, 3>  _EgoVel_type;
  _EgoVel_type EgoVel;

   typedef boost::array<float, 3>  _IMUVel_type;
  _IMUVel_type IMUVel;

   typedef float _EgoVelocity_type;
  _EgoVelocity_type EgoVelocity;

   typedef float _IMUVelocity_type;
  _IMUVelocity_type IMUVelocity;





  typedef boost::shared_ptr< ::Msg::GNSS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Msg::GNSS_<ContainerAllocator> const> ConstPtr;

}; // struct GNSS_

typedef ::Msg::GNSS_<std::allocator<void> > GNSS;

typedef boost::shared_ptr< ::Msg::GNSS > GNSSPtr;
typedef boost::shared_ptr< ::Msg::GNSS const> GNSSConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::Msg::GNSS_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::Msg::GNSS_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::Msg::GNSS_<ContainerAllocator1> & lhs, const ::Msg::GNSS_<ContainerAllocator2> & rhs)
{
  return lhs.EgoAccel == rhs.EgoAccel &&
    lhs.IMUAccel == rhs.IMUAccel &&
    lhs.EgoVel == rhs.EgoVel &&
    lhs.IMUVel == rhs.IMUVel &&
    lhs.EgoVelocity == rhs.EgoVelocity &&
    lhs.IMUVelocity == rhs.IMUVelocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::Msg::GNSS_<ContainerAllocator1> & lhs, const ::Msg::GNSS_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace Msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::Msg::GNSS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::Msg::GNSS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::Msg::GNSS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::Msg::GNSS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Msg::GNSS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Msg::GNSS_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::Msg::GNSS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a2a4beeb4c80c4affddeb8b52bbfae32";
  }

  static const char* value(const ::Msg::GNSS_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa2a4beeb4c80c4afULL;
  static const uint64_t static_value2 = 0xfddeb8b52bbfae32ULL;
};

template<class ContainerAllocator>
struct DataType< ::Msg::GNSS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Msg/GNSS";
  }

  static const char* value(const ::Msg::GNSS_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::Msg::GNSS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[3] EgoAccel\n"
"float32[3] IMUAccel\n"
"float32[3] EgoVel\n"
"float32[3] IMUVel\n"
"float32 EgoVelocity\n"
"float32 IMUVelocity\n"
;
  }

  static const char* value(const ::Msg::GNSS_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::Msg::GNSS_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.EgoAccel);
      stream.next(m.IMUAccel);
      stream.next(m.EgoVel);
      stream.next(m.IMUVel);
      stream.next(m.EgoVelocity);
      stream.next(m.IMUVelocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GNSS_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Msg::GNSS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::Msg::GNSS_<ContainerAllocator>& v)
  {
    s << indent << "EgoAccel[]" << std::endl;
    for (size_t i = 0; i < v.EgoAccel.size(); ++i)
    {
      s << indent << "  EgoAccel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.EgoAccel[i]);
    }
    s << indent << "IMUAccel[]" << std::endl;
    for (size_t i = 0; i < v.IMUAccel.size(); ++i)
    {
      s << indent << "  IMUAccel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.IMUAccel[i]);
    }
    s << indent << "EgoVel[]" << std::endl;
    for (size_t i = 0; i < v.EgoVel.size(); ++i)
    {
      s << indent << "  EgoVel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.EgoVel[i]);
    }
    s << indent << "IMUVel[]" << std::endl;
    for (size_t i = 0; i < v.IMUVel.size(); ++i)
    {
      s << indent << "  IMUVel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.IMUVel[i]);
    }
    s << indent << "EgoVelocity: ";
    Printer<float>::stream(s, indent + "  ", v.EgoVelocity);
    s << indent << "IMUVelocity: ";
    Printer<float>::stream(s, indent + "  ", v.IMUVelocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_MESSAGE_GNSS_H
