// Generated by gencpp from file morai_msgs/CMDConveyor.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_CMDCONVEYOR_H
#define MORAI_MSGS_MESSAGE_CMDCONVEYOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace morai_msgs
{
template <class ContainerAllocator>
struct CMDConveyor_
{
  typedef CMDConveyor_<ContainerAllocator> Type;

  CMDConveyor_()
    : position_sensor(false)
    , palette_sensor1(false)
    , palette_sensor2(false)
    , limit_sensor(0)  {
    }
  CMDConveyor_(const ContainerAllocator& _alloc)
    : position_sensor(false)
    , palette_sensor1(false)
    , palette_sensor2(false)
    , limit_sensor(0)  {
  (void)_alloc;
    }



   typedef uint8_t _position_sensor_type;
  _position_sensor_type position_sensor;

   typedef uint8_t _palette_sensor1_type;
  _palette_sensor1_type palette_sensor1;

   typedef uint8_t _palette_sensor2_type;
  _palette_sensor2_type palette_sensor2;

   typedef int32_t _limit_sensor_type;
  _limit_sensor_type limit_sensor;





  typedef boost::shared_ptr< ::morai_msgs::CMDConveyor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::CMDConveyor_<ContainerAllocator> const> ConstPtr;

}; // struct CMDConveyor_

typedef ::morai_msgs::CMDConveyor_<std::allocator<void> > CMDConveyor;

typedef boost::shared_ptr< ::morai_msgs::CMDConveyor > CMDConveyorPtr;
typedef boost::shared_ptr< ::morai_msgs::CMDConveyor const> CMDConveyorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::CMDConveyor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::CMDConveyor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::CMDConveyor_<ContainerAllocator1> & lhs, const ::morai_msgs::CMDConveyor_<ContainerAllocator2> & rhs)
{
  return lhs.position_sensor == rhs.position_sensor &&
    lhs.palette_sensor1 == rhs.palette_sensor1 &&
    lhs.palette_sensor2 == rhs.palette_sensor2 &&
    lhs.limit_sensor == rhs.limit_sensor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::CMDConveyor_<ContainerAllocator1> & lhs, const ::morai_msgs::CMDConveyor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::CMDConveyor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::CMDConveyor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::CMDConveyor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::CMDConveyor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::CMDConveyor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::CMDConveyor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::CMDConveyor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dff78b314b2d7216c66dfddb645260b4";
  }

  static const char* value(const ::morai_msgs::CMDConveyor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdff78b314b2d7216ULL;
  static const uint64_t static_value2 = 0xc66dfddb645260b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::CMDConveyor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/CMDConveyor";
  }

  static const char* value(const ::morai_msgs::CMDConveyor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::CMDConveyor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool position_sensor\n"
"bool palette_sensor1\n"
"bool palette_sensor2\n"
"int32 limit_sensor\n"
;
  }

  static const char* value(const ::morai_msgs::CMDConveyor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::CMDConveyor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position_sensor);
      stream.next(m.palette_sensor1);
      stream.next(m.palette_sensor2);
      stream.next(m.limit_sensor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CMDConveyor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::CMDConveyor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::CMDConveyor_<ContainerAllocator>& v)
  {
    s << indent << "position_sensor: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.position_sensor);
    s << indent << "palette_sensor1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.palette_sensor1);
    s << indent << "palette_sensor2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.palette_sensor2);
    s << indent << "limit_sensor: ";
    Printer<int32_t>::stream(s, indent + "  ", v.limit_sensor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_CMDCONVEYOR_H
