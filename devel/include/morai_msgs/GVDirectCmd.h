// Generated by gencpp from file morai_msgs/GVDirectCmd.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_GVDIRECTCMD_H
#define MORAI_MSGS_MESSAGE_GVDIRECTCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace morai_msgs
{
template <class ContainerAllocator>
struct GVDirectCmd_
{
  typedef GVDirectCmd_<ContainerAllocator> Type;

  GVDirectCmd_()
    : steerType(0)
    , throttle(0.0)
    , brake(0.0)
    , skidSteering(0.0)
    , steerAngle()  {
      steerAngle.assign(0.0);
  }
  GVDirectCmd_(const ContainerAllocator& _alloc)
    : steerType(0)
    , throttle(0.0)
    , brake(0.0)
    , skidSteering(0.0)
    , steerAngle()  {
  (void)_alloc;
      steerAngle.assign(0.0);
  }



   typedef int32_t _steerType_type;
  _steerType_type steerType;

   typedef float _throttle_type;
  _throttle_type throttle;

   typedef float _brake_type;
  _brake_type brake;

   typedef float _skidSteering_type;
  _skidSteering_type skidSteering;

   typedef boost::array<float, 10>  _steerAngle_type;
  _steerAngle_type steerAngle;





  typedef boost::shared_ptr< ::morai_msgs::GVDirectCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::GVDirectCmd_<ContainerAllocator> const> ConstPtr;

}; // struct GVDirectCmd_

typedef ::morai_msgs::GVDirectCmd_<std::allocator<void> > GVDirectCmd;

typedef boost::shared_ptr< ::morai_msgs::GVDirectCmd > GVDirectCmdPtr;
typedef boost::shared_ptr< ::morai_msgs::GVDirectCmd const> GVDirectCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::GVDirectCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::GVDirectCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::GVDirectCmd_<ContainerAllocator1> & lhs, const ::morai_msgs::GVDirectCmd_<ContainerAllocator2> & rhs)
{
  return lhs.steerType == rhs.steerType &&
    lhs.throttle == rhs.throttle &&
    lhs.brake == rhs.brake &&
    lhs.skidSteering == rhs.skidSteering &&
    lhs.steerAngle == rhs.steerAngle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::GVDirectCmd_<ContainerAllocator1> & lhs, const ::morai_msgs::GVDirectCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::GVDirectCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::GVDirectCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::GVDirectCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::GVDirectCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::GVDirectCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::GVDirectCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::GVDirectCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "30caf69ae63756f977cf67485048deb6";
  }

  static const char* value(const ::morai_msgs::GVDirectCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x30caf69ae63756f9ULL;
  static const uint64_t static_value2 = 0x77cf67485048deb6ULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::GVDirectCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/GVDirectCmd";
  }

  static const char* value(const ::morai_msgs::GVDirectCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::GVDirectCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 steerType\n"
"float32 throttle\n"
"float32 brake\n"
"float32 skidSteering\n"
"float32[10] steerAngle\n"
;
  }

  static const char* value(const ::morai_msgs::GVDirectCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::GVDirectCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.steerType);
      stream.next(m.throttle);
      stream.next(m.brake);
      stream.next(m.skidSteering);
      stream.next(m.steerAngle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GVDirectCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::GVDirectCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::GVDirectCmd_<ContainerAllocator>& v)
  {
    s << indent << "steerType: ";
    Printer<int32_t>::stream(s, indent + "  ", v.steerType);
    s << indent << "throttle: ";
    Printer<float>::stream(s, indent + "  ", v.throttle);
    s << indent << "brake: ";
    Printer<float>::stream(s, indent + "  ", v.brake);
    s << indent << "skidSteering: ";
    Printer<float>::stream(s, indent + "  ", v.skidSteering);
    s << indent << "steerAngle[]" << std::endl;
    for (size_t i = 0; i < v.steerAngle.size(); ++i)
    {
      s << indent << "  steerAngle[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.steerAngle[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_GVDIRECTCMD_H
