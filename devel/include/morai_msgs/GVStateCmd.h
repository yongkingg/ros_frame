// Generated by gencpp from file morai_msgs/GVStateCmd.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_GVSTATECMD_H
#define MORAI_MSGS_MESSAGE_GVSTATECMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace morai_msgs
{
template <class ContainerAllocator>
struct GVStateCmd_
{
  typedef GVStateCmd_<ContainerAllocator> Type;

  GVStateCmd_()
    : latCtrlType(0)
    , targetLongitudinalVelocity(0.0)
    , targetAngularVelocity(0.0)
    , targetSteerAngle()  {
      targetSteerAngle.assign(0.0);
  }
  GVStateCmd_(const ContainerAllocator& _alloc)
    : latCtrlType(0)
    , targetLongitudinalVelocity(0.0)
    , targetAngularVelocity(0.0)
    , targetSteerAngle()  {
  (void)_alloc;
      targetSteerAngle.assign(0.0);
  }



   typedef int32_t _latCtrlType_type;
  _latCtrlType_type latCtrlType;

   typedef float _targetLongitudinalVelocity_type;
  _targetLongitudinalVelocity_type targetLongitudinalVelocity;

   typedef float _targetAngularVelocity_type;
  _targetAngularVelocity_type targetAngularVelocity;

   typedef boost::array<float, 10>  _targetSteerAngle_type;
  _targetSteerAngle_type targetSteerAngle;





  typedef boost::shared_ptr< ::morai_msgs::GVStateCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::GVStateCmd_<ContainerAllocator> const> ConstPtr;

}; // struct GVStateCmd_

typedef ::morai_msgs::GVStateCmd_<std::allocator<void> > GVStateCmd;

typedef boost::shared_ptr< ::morai_msgs::GVStateCmd > GVStateCmdPtr;
typedef boost::shared_ptr< ::morai_msgs::GVStateCmd const> GVStateCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::GVStateCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::GVStateCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::GVStateCmd_<ContainerAllocator1> & lhs, const ::morai_msgs::GVStateCmd_<ContainerAllocator2> & rhs)
{
  return lhs.latCtrlType == rhs.latCtrlType &&
    lhs.targetLongitudinalVelocity == rhs.targetLongitudinalVelocity &&
    lhs.targetAngularVelocity == rhs.targetAngularVelocity &&
    lhs.targetSteerAngle == rhs.targetSteerAngle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::GVStateCmd_<ContainerAllocator1> & lhs, const ::morai_msgs::GVStateCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::GVStateCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::GVStateCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::GVStateCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::GVStateCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::GVStateCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::GVStateCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::GVStateCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9c46684704317c52202cdb27e4bbbc62";
  }

  static const char* value(const ::morai_msgs::GVStateCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9c46684704317c52ULL;
  static const uint64_t static_value2 = 0x202cdb27e4bbbc62ULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::GVStateCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/GVStateCmd";
  }

  static const char* value(const ::morai_msgs::GVStateCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::GVStateCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 latCtrlType\n"
"float32 targetLongitudinalVelocity\n"
"float32 targetAngularVelocity\n"
"float32[10] targetSteerAngle\n"
;
  }

  static const char* value(const ::morai_msgs::GVStateCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::GVStateCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.latCtrlType);
      stream.next(m.targetLongitudinalVelocity);
      stream.next(m.targetAngularVelocity);
      stream.next(m.targetSteerAngle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GVStateCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::GVStateCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::GVStateCmd_<ContainerAllocator>& v)
  {
    s << indent << "latCtrlType: ";
    Printer<int32_t>::stream(s, indent + "  ", v.latCtrlType);
    s << indent << "targetLongitudinalVelocity: ";
    Printer<float>::stream(s, indent + "  ", v.targetLongitudinalVelocity);
    s << indent << "targetAngularVelocity: ";
    Printer<float>::stream(s, indent + "  ", v.targetAngularVelocity);
    s << indent << "targetSteerAngle[]" << std::endl;
    for (size_t i = 0; i < v.targetSteerAngle.size(); ++i)
    {
      s << indent << "  targetSteerAngle[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.targetSteerAngle[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_GVSTATECMD_H
