// Generated by gencpp from file morai_msgs/ManipulatorControl.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_MANIPULATORCONTROL_H
#define MORAI_MSGS_MESSAGE_MANIPULATORCONTROL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace morai_msgs
{
template <class ContainerAllocator>
struct ManipulatorControl_
{
  typedef ManipulatorControl_<ContainerAllocator> Type;

  ManipulatorControl_()
    : ControlType(0)
    , x1(0.0)
    , x2(0.0)
    , x3(0.0)
    , x4(0.0)
    , x5(0.0)
    , x6(0.0)
    , GripperStatus(false)  {
    }
  ManipulatorControl_(const ContainerAllocator& _alloc)
    : ControlType(0)
    , x1(0.0)
    , x2(0.0)
    , x3(0.0)
    , x4(0.0)
    , x5(0.0)
    , x6(0.0)
    , GripperStatus(false)  {
  (void)_alloc;
    }



   typedef int32_t _ControlType_type;
  _ControlType_type ControlType;

   typedef float _x1_type;
  _x1_type x1;

   typedef float _x2_type;
  _x2_type x2;

   typedef float _x3_type;
  _x3_type x3;

   typedef float _x4_type;
  _x4_type x4;

   typedef float _x5_type;
  _x5_type x5;

   typedef float _x6_type;
  _x6_type x6;

   typedef uint8_t _GripperStatus_type;
  _GripperStatus_type GripperStatus;





  typedef boost::shared_ptr< ::morai_msgs::ManipulatorControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::ManipulatorControl_<ContainerAllocator> const> ConstPtr;

}; // struct ManipulatorControl_

typedef ::morai_msgs::ManipulatorControl_<std::allocator<void> > ManipulatorControl;

typedef boost::shared_ptr< ::morai_msgs::ManipulatorControl > ManipulatorControlPtr;
typedef boost::shared_ptr< ::morai_msgs::ManipulatorControl const> ManipulatorControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::ManipulatorControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::ManipulatorControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::ManipulatorControl_<ContainerAllocator1> & lhs, const ::morai_msgs::ManipulatorControl_<ContainerAllocator2> & rhs)
{
  return lhs.ControlType == rhs.ControlType &&
    lhs.x1 == rhs.x1 &&
    lhs.x2 == rhs.x2 &&
    lhs.x3 == rhs.x3 &&
    lhs.x4 == rhs.x4 &&
    lhs.x5 == rhs.x5 &&
    lhs.x6 == rhs.x6 &&
    lhs.GripperStatus == rhs.GripperStatus;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::ManipulatorControl_<ContainerAllocator1> & lhs, const ::morai_msgs::ManipulatorControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::ManipulatorControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::ManipulatorControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::ManipulatorControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::ManipulatorControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::ManipulatorControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::ManipulatorControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::ManipulatorControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2949cc268ce29a2b5dafef91eaf5bd1c";
  }

  static const char* value(const ::morai_msgs::ManipulatorControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2949cc268ce29a2bULL;
  static const uint64_t static_value2 = 0x5dafef91eaf5bd1cULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::ManipulatorControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/ManipulatorControl";
  }

  static const char* value(const ::morai_msgs::ManipulatorControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::ManipulatorControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 ControlType\n"
"float32 x1\n"
"float32 x2\n"
"float32 x3\n"
"float32 x4\n"
"float32 x5\n"
"float32 x6\n"
"bool GripperStatus\n"
"\n"
;
  }

  static const char* value(const ::morai_msgs::ManipulatorControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::ManipulatorControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ControlType);
      stream.next(m.x1);
      stream.next(m.x2);
      stream.next(m.x3);
      stream.next(m.x4);
      stream.next(m.x5);
      stream.next(m.x6);
      stream.next(m.GripperStatus);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ManipulatorControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::ManipulatorControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::ManipulatorControl_<ContainerAllocator>& v)
  {
    s << indent << "ControlType: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ControlType);
    s << indent << "x1: ";
    Printer<float>::stream(s, indent + "  ", v.x1);
    s << indent << "x2: ";
    Printer<float>::stream(s, indent + "  ", v.x2);
    s << indent << "x3: ";
    Printer<float>::stream(s, indent + "  ", v.x3);
    s << indent << "x4: ";
    Printer<float>::stream(s, indent + "  ", v.x4);
    s << indent << "x5: ";
    Printer<float>::stream(s, indent + "  ", v.x5);
    s << indent << "x6: ";
    Printer<float>::stream(s, indent + "  ", v.x6);
    s << indent << "GripperStatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.GripperStatus);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_MANIPULATORCONTROL_H
