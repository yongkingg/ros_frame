// Generated by gencpp from file morai_msgs/ShipState.msg
// DO NOT EDIT!


#ifndef MORAI_MSGS_MESSAGE_SHIPSTATE_H
#define MORAI_MSGS_MESSAGE_SHIPSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <morai_msgs/GeoVector3Message.h>
#include <morai_msgs/GeoVector3Message.h>
#include <morai_msgs/GeoVector3Message.h>
#include <morai_msgs/GeoVector3Message.h>

namespace morai_msgs
{
template <class ContainerAllocator>
struct ShipState_
{
  typedef ShipState_<ContainerAllocator> Type;

  ShipState_()
    : thrust(0.0)
    , rudder(0.0)
    , position()
    , rotation()
    , velocity()
    , angular_velocity()  {
    }
  ShipState_(const ContainerAllocator& _alloc)
    : thrust(0.0)
    , rudder(0.0)
    , position(_alloc)
    , rotation(_alloc)
    , velocity(_alloc)
    , angular_velocity(_alloc)  {
  (void)_alloc;
    }



   typedef float _thrust_type;
  _thrust_type thrust;

   typedef float _rudder_type;
  _rudder_type rudder;

   typedef  ::morai_msgs::GeoVector3Message_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::morai_msgs::GeoVector3Message_<ContainerAllocator>  _rotation_type;
  _rotation_type rotation;

   typedef  ::morai_msgs::GeoVector3Message_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::morai_msgs::GeoVector3Message_<ContainerAllocator>  _angular_velocity_type;
  _angular_velocity_type angular_velocity;





  typedef boost::shared_ptr< ::morai_msgs::ShipState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_msgs::ShipState_<ContainerAllocator> const> ConstPtr;

}; // struct ShipState_

typedef ::morai_msgs::ShipState_<std::allocator<void> > ShipState;

typedef boost::shared_ptr< ::morai_msgs::ShipState > ShipStatePtr;
typedef boost::shared_ptr< ::morai_msgs::ShipState const> ShipStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_msgs::ShipState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_msgs::ShipState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_msgs::ShipState_<ContainerAllocator1> & lhs, const ::morai_msgs::ShipState_<ContainerAllocator2> & rhs)
{
  return lhs.thrust == rhs.thrust &&
    lhs.rudder == rhs.rudder &&
    lhs.position == rhs.position &&
    lhs.rotation == rhs.rotation &&
    lhs.velocity == rhs.velocity &&
    lhs.angular_velocity == rhs.angular_velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_msgs::ShipState_<ContainerAllocator1> & lhs, const ::morai_msgs::ShipState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::ShipState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_msgs::ShipState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::ShipState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_msgs::ShipState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::ShipState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_msgs::ShipState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_msgs::ShipState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "48473abafb39e8611d0c7321f91ca943";
  }

  static const char* value(const ::morai_msgs::ShipState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x48473abafb39e861ULL;
  static const uint64_t static_value2 = 0x1d0c7321f91ca943ULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_msgs::ShipState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_msgs/ShipState";
  }

  static const char* value(const ::morai_msgs::ShipState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_msgs::ShipState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 thrust\n"
"float32 rudder\n"
"GeoVector3Message position\n"
"GeoVector3Message rotation\n"
"GeoVector3Message velocity\n"
"GeoVector3Message angular_velocity\n"
"================================================================================\n"
"MSG: morai_msgs/GeoVector3Message\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::morai_msgs::ShipState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_msgs::ShipState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.thrust);
      stream.next(m.rudder);
      stream.next(m.position);
      stream.next(m.rotation);
      stream.next(m.velocity);
      stream.next(m.angular_velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ShipState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_msgs::ShipState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_msgs::ShipState_<ContainerAllocator>& v)
  {
    s << indent << "thrust: ";
    Printer<float>::stream(s, indent + "  ", v.thrust);
    s << indent << "rudder: ";
    Printer<float>::stream(s, indent + "  ", v.rudder);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::morai_msgs::GeoVector3Message_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "rotation: ";
    s << std::endl;
    Printer< ::morai_msgs::GeoVector3Message_<ContainerAllocator> >::stream(s, indent + "  ", v.rotation);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::morai_msgs::GeoVector3Message_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "angular_velocity: ";
    s << std::endl;
    Printer< ::morai_msgs::GeoVector3Message_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_MSGS_MESSAGE_SHIPSTATE_H
