# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from morai_msgs/GVDirectCmd.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GVDirectCmd(genpy.Message):
  _md5sum = "30caf69ae63756f977cf67485048deb6"
  _type = "morai_msgs/GVDirectCmd"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 steerType
float32 throttle
float32 brake
float32 skidSteering
float32[10] steerAngle"""
  __slots__ = ['steerType','throttle','brake','skidSteering','steerAngle']
  _slot_types = ['int32','float32','float32','float32','float32[10]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       steerType,throttle,brake,skidSteering,steerAngle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GVDirectCmd, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.steerType is None:
        self.steerType = 0
      if self.throttle is None:
        self.throttle = 0.
      if self.brake is None:
        self.brake = 0.
      if self.skidSteering is None:
        self.skidSteering = 0.
      if self.steerAngle is None:
        self.steerAngle = [0.] * 10
    else:
      self.steerType = 0
      self.throttle = 0.
      self.brake = 0.
      self.skidSteering = 0.
      self.steerAngle = [0.] * 10

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i3f().pack(_x.steerType, _x.throttle, _x.brake, _x.skidSteering))
      buff.write(_get_struct_10f().pack(*self.steerAngle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.steerType, _x.throttle, _x.brake, _x.skidSteering,) = _get_struct_i3f().unpack(str[start:end])
      start = end
      end += 40
      self.steerAngle = _get_struct_10f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i3f().pack(_x.steerType, _x.throttle, _x.brake, _x.skidSteering))
      buff.write(self.steerAngle.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.steerType, _x.throttle, _x.brake, _x.skidSteering,) = _get_struct_i3f().unpack(str[start:end])
      start = end
      end += 40
      self.steerAngle = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=10)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10f = None
def _get_struct_10f():
    global _struct_10f
    if _struct_10f is None:
        _struct_10f = struct.Struct("<10f")
    return _struct_10f
_struct_i3f = None
def _get_struct_i3f():
    global _struct_i3f
    if _struct_i3f is None:
        _struct_i3f = struct.Struct("<i3f")
    return _struct_i3f
