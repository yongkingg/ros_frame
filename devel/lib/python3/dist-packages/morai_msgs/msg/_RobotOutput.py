# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from morai_msgs/RobotOutput.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RobotOutput(genpy.Message):
  _md5sum = "eaa8f4689886d42e18ac9f19e4d67999"
  _type = "morai_msgs/RobotOutput"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 drive_mode
bool safe_mode_en
bool is_obstacle
int32 is_enabled
bool is_collision
bool is_emg_stop
bool is_protect_stop
bool is_brake
bool is_speed_limit_on_safe_mode
bool is_muting
bool attach_exist
int32 attach_mode
bool is_attach_sig"""
  __slots__ = ['drive_mode','safe_mode_en','is_obstacle','is_enabled','is_collision','is_emg_stop','is_protect_stop','is_brake','is_speed_limit_on_safe_mode','is_muting','attach_exist','attach_mode','is_attach_sig']
  _slot_types = ['int32','bool','bool','int32','bool','bool','bool','bool','bool','bool','bool','int32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       drive_mode,safe_mode_en,is_obstacle,is_enabled,is_collision,is_emg_stop,is_protect_stop,is_brake,is_speed_limit_on_safe_mode,is_muting,attach_exist,attach_mode,is_attach_sig

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotOutput, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.drive_mode is None:
        self.drive_mode = 0
      if self.safe_mode_en is None:
        self.safe_mode_en = False
      if self.is_obstacle is None:
        self.is_obstacle = False
      if self.is_enabled is None:
        self.is_enabled = 0
      if self.is_collision is None:
        self.is_collision = False
      if self.is_emg_stop is None:
        self.is_emg_stop = False
      if self.is_protect_stop is None:
        self.is_protect_stop = False
      if self.is_brake is None:
        self.is_brake = False
      if self.is_speed_limit_on_safe_mode is None:
        self.is_speed_limit_on_safe_mode = False
      if self.is_muting is None:
        self.is_muting = False
      if self.attach_exist is None:
        self.attach_exist = False
      if self.attach_mode is None:
        self.attach_mode = 0
      if self.is_attach_sig is None:
        self.is_attach_sig = False
    else:
      self.drive_mode = 0
      self.safe_mode_en = False
      self.is_obstacle = False
      self.is_enabled = 0
      self.is_collision = False
      self.is_emg_stop = False
      self.is_protect_stop = False
      self.is_brake = False
      self.is_speed_limit_on_safe_mode = False
      self.is_muting = False
      self.attach_exist = False
      self.attach_mode = 0
      self.is_attach_sig = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i2Bi7BiB().pack(_x.drive_mode, _x.safe_mode_en, _x.is_obstacle, _x.is_enabled, _x.is_collision, _x.is_emg_stop, _x.is_protect_stop, _x.is_brake, _x.is_speed_limit_on_safe_mode, _x.is_muting, _x.attach_exist, _x.attach_mode, _x.is_attach_sig))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.drive_mode, _x.safe_mode_en, _x.is_obstacle, _x.is_enabled, _x.is_collision, _x.is_emg_stop, _x.is_protect_stop, _x.is_brake, _x.is_speed_limit_on_safe_mode, _x.is_muting, _x.attach_exist, _x.attach_mode, _x.is_attach_sig,) = _get_struct_i2Bi7BiB().unpack(str[start:end])
      self.safe_mode_en = bool(self.safe_mode_en)
      self.is_obstacle = bool(self.is_obstacle)
      self.is_collision = bool(self.is_collision)
      self.is_emg_stop = bool(self.is_emg_stop)
      self.is_protect_stop = bool(self.is_protect_stop)
      self.is_brake = bool(self.is_brake)
      self.is_speed_limit_on_safe_mode = bool(self.is_speed_limit_on_safe_mode)
      self.is_muting = bool(self.is_muting)
      self.attach_exist = bool(self.attach_exist)
      self.is_attach_sig = bool(self.is_attach_sig)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i2Bi7BiB().pack(_x.drive_mode, _x.safe_mode_en, _x.is_obstacle, _x.is_enabled, _x.is_collision, _x.is_emg_stop, _x.is_protect_stop, _x.is_brake, _x.is_speed_limit_on_safe_mode, _x.is_muting, _x.attach_exist, _x.attach_mode, _x.is_attach_sig))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.drive_mode, _x.safe_mode_en, _x.is_obstacle, _x.is_enabled, _x.is_collision, _x.is_emg_stop, _x.is_protect_stop, _x.is_brake, _x.is_speed_limit_on_safe_mode, _x.is_muting, _x.attach_exist, _x.attach_mode, _x.is_attach_sig,) = _get_struct_i2Bi7BiB().unpack(str[start:end])
      self.safe_mode_en = bool(self.safe_mode_en)
      self.is_obstacle = bool(self.is_obstacle)
      self.is_collision = bool(self.is_collision)
      self.is_emg_stop = bool(self.is_emg_stop)
      self.is_protect_stop = bool(self.is_protect_stop)
      self.is_brake = bool(self.is_brake)
      self.is_speed_limit_on_safe_mode = bool(self.is_speed_limit_on_safe_mode)
      self.is_muting = bool(self.is_muting)
      self.attach_exist = bool(self.attach_exist)
      self.is_attach_sig = bool(self.is_attach_sig)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i2Bi7BiB = None
def _get_struct_i2Bi7BiB():
    global _struct_i2Bi7BiB
    if _struct_i2Bi7BiB is None:
        _struct_i2Bi7BiB = struct.Struct("<i2Bi7BiB")
    return _struct_i2Bi7BiB
